definitions:
  dto.GuestLoginRequest:
    properties:
      password:
        example: ""
        minLength: 3
        type: string
      username:
        example: ""
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.GuestLoginResponse:
    properties:
      token:
        example: ""
        type: string
    type: object
  dto.GuestRegisterDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.GuestRegisterRequest:
    properties:
      name:
        example: ""
        minLength: 3
        type: string
      password:
        example: ""
        minLength: 3
        type: string
      username:
        example: ""
        minLength: 3
        type: string
    required:
    - name
    - password
    - username
    type: object
  dto.GuestUploadResponse:
    properties:
      fieldname:
        example: ""
        type: string
      mimetype:
        example: ""
        type: string
      name:
        example: ""
        type: string
      size:
        example: 0
        type: integer
    type: object
  dto.UserAuthDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.UserAuthResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserAuthDataResponse'
      message:
        example: ""
        type: string
    type: object
  dto.UserIndexDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.UserIndexResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.UserIndexDataResponse'
        type: array
      message:
        example: ""
        type: string
      pagination:
        $ref: '#/definitions/helper.Paginate'
    type: object
  helper.Paginate:
    properties:
      limit:
        example: 0
        type: integer
      page:
        example: 0
        type: integer
      total:
        example: 0
        type: integer
    type: object
info:
  contact: {}
  description: Service API in Go using Fiber Framework
  title: Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.GuestLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.GuestLoginResponse'
      summary: Login
      tags:
      - Guest
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.GuestRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.GuestRegisterDataResponse'
      summary: Register
      tags:
      - Guest
  /auth/upload:
    post:
      consumes:
      - application/json
      description: Upload
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.GuestUploadResponse'
      summary: Upload
      tags:
      - Guest
  /auth/user:
    get:
      consumes:
      - application/json
      description: Get user by auth
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.UserAuthResponse'
      security:
      - BearerAuth: []
      summary: Get user by auth
      tags:
      - User
  /user:
    get:
      consumes:
      - application/json
      description: Get users
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: keyword
        in: query
        name: keyword
        type: string
      - description: orderBy
        in: query
        name: orderBy
        type: string
      - description: sortedBy
        enum:
        - asc
        - desc
        in: query
        name: sortedBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.UserIndexResponse'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.UserAuthResponse'
      security:
      - BearerAuth: []
      summary: Get user by id
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
